--- Changed layout to flex instead of floating ---

# resizeBefore() and resizeAfter() seem a bad way to handle resizing of neighbour panes
Plan: change the resizeBefore() and resizeAfter() functions in Divider.js so that it is cleaner and more
obvious what they do.
1: Rename to moveBack/moveForward, indicating where the divider will move. This helps information hiding
and doesn't indicate the implementation just resizes the other panes.
Solved.

--- Renamed funtions to make it clearer what they do ---

# Dividers and Panes both have dupliate code, 1 set of functions for width and 1 set for height
Plan: combine the functions into 1 and just call a getSize() function instead of specifying width or height.
The divider subclasses can implement the getSize() function and return the appropriate value
1: Added PaneHorizontal and PaneVertical subclasses of Pane
2: Moved most functions to the Pane class and just left 4 to be delegated to the subclasses
    getSize(), getParentSize(), setSize(), getSizeCSS() (Probably can cut down on a few)
3: Renamed all references to width to size
4: Moved all the universal functions, now using template method to get size to the Divider class, allowing subclasses
    to implement layout(), getElSize(), getMousePos(), and getOffset()
Solved.

--- Changed Divider and Pane to use the templete method ---

# Pane.js has no comments
Plan: comment in Pane.js

06/09/17
Panes have no way of updating content when they are resized
Need to add a listener to the Pane to fire on resize
    Plan 
        1: implement addOnResize/removeOnResize function in Pane which takes a callback function
        2: fire all added callback functions when resized with the new size of the Pane
    Execution
        1: Changed to just a single setOnResize function in Pane to set/remove the callback
        2: called the callback in the resize function